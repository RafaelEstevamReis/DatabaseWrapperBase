<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.DatabaseWrapper</name>
    </assembly>
    <members>
        <member name="T:Simple.DatabaseWrapper.Attributes.AllowNullAttribute">
            <summary>
            Specify that this column should allow nulls
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.AutoIncrementAttribute">
            <summary>
            Specify that this column has AutoIncrement
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.DefaultValueAttribute">
            <summary>
            Specify default value for this column
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.Attributes.DefaultValueAttribute.DefaultValue">
            <summary>
            Default value specified
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Attributes.DefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Creates a new instance
            </summary>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.IgnoreAttribute">
            <summary>
            Specify that this column should be ignored
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.NotNullAttribute">
            <summary>
            Specify that this column should not allow nulls
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.PrimaryKeyAttribute">
            <summary>
            Specify that this column is PrimaryKey
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.SizeAttribute">
            <summary>
            Specify size for this column
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.Attributes.SizeAttribute.Size">
            <summary>
            Specify column size
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.Attributes.SizeAttribute.Precision">
            <summary>
            Specify column precision
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Attributes.SizeAttribute.#ctor(System.Int32)">
            <summary>
            Specify size for this column
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Attributes.SizeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Specify size and precision for this column
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Attributes.UniqueAttribute">
            <summary>
            Specify that this column should only have unique values
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.DataBuffer`1">
            <summary>
            Bufferizes data to flush in batches.
            Using List+Lock (Ueses ConcurrentBag on Net5 and NetCore3.1)
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.DataBuffer`1.IgnoreNulls">
            <summary>
            Ignore Nulls additions
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.DataBuffer`1.Quantity">
            <summary>
            Batch size
            </summary>
        </member>
        <member name="P:Simple.DatabaseWrapper.DataBuffer`1.FlushData">
            <summary>
            Flush action
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataBuffer`1.#ctor(System.Int32,System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Creates a new buffer instance
            </summary>
            <param name="quantity">Batch size</param>
            <param name="flushData">Flush action</param>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataBuffer`1.Add(`0)">
            <summary>
            Adds a new value to the buffer
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataBuffer`1.Flush">
            <summary>
            Flushes the buffer
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataBuffer`1.Dispose">
            <summary>
            Disposes the object and flushes all remaining data
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.DataClone">
            <summary>
            Object cloning tool
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataClone.CopyWithSerialization``1(System.Object)">
            <summary>
            Clone an Object using serialization, slow but versatile
            This one, uses old XmlSerializer
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataClone.MapModel``2(``0)">
            <summary>
            Map properties from a model to another. Property name is used for matching
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataClone.CopyObject``1(``0)">
            <summary>
            Creates a recursive copy of an object
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.DataClone.CopyObject(System.Object)">
            <summary>
            Creates a recursive copy of an object
            </summary>
        </member>
        <member name="T:Simple.DatabaseWrapper.Helpers.TypeHelper">
            <summary>
            Helper class for Types
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Helpers.TypeHelper.CheckIfSimpleType(System.Type)">
            <summary>
            Check if a specified type is 'Simple'
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Helpers.TypeHelper.ReadParamValue(Simple.DatabaseWrapper.TypeReader.TypeItemInfo,System.Object)">
            <summary>
            Retrieve the value of a field or property
            Guid is read as System.Guid
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Helpers.TypeHelper.ReadParamValue(Simple.DatabaseWrapper.TypeReader.TypeItemInfo,System.Object,System.Boolean)">
            <summary>
            Retrieve the value of a field or property
            </summary>
        </member>
        <member name="M:Simple.DatabaseWrapper.Helpers.TypeHelper.CheckIfAnonymousType(System.Type)">
            <summary>
            Check if a type is Anonymous: IsClass, IsGenericType, IsCompillerGenerated, has NotPublic flag,
            Name starts with '&lt;&gt;' or 'VB$'
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
            <summary>
            Replacement for.NetCore System.ComponentModel.DataAnnotations
            </summary>
        </member>
    </members>
</doc>
